//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from smiles.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class smilesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		ELEMENT=53, ORGANIC_SYMBOL=54, AROMATIC_SYMBOL=55, WILDCARD=56, DIGIT=57;
	public const int
		RULE_smiles = 0, RULE_chain = 1, RULE_branched_atom = 2, RULE_branch = 3, 
		RULE_ringbond = 4, RULE_bond = 5, RULE_dot = 6, RULE_atom = 7, RULE_symbol = 8, 
		RULE_organic = 9, RULE_aromatic = 10, RULE_chiral = 11, RULE_charge = 12, 
		RULE_hcount = 13, RULE_atomclass = 14, RULE_isotope = 15;
	public static readonly string[] ruleNames = {
		"smiles", "chain", "branched_atom", "branch", "ringbond", "bond", "dot", 
		"atom", "symbol", "organic", "aromatic", "chiral", "charge", "hcount", 
		"atomclass", "isotope"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'%'", "'-'", "'='", "'#'", "'$'", "':'", "'\\'", 
		"'/'", "'.'", "'['", "']'", "'B'", "'C'", "'N'", "'O'", "'S'", "'P'", 
		"'F'", "'Cl'", "'Br'", "'I'", "'b'", "'c'", "'n'", "'o'", "'p'", "'s'", 
		"'se'", "'as'", "'@'", "'@@'", "'@TH1'", "'@TH2'", "'@AL1'", "'@AL2'", 
		"'@SP1'", "'@SP2'", "'@SP3'", "'@TB1'", "'@TB2'", "'@TB3'", "'@TB30'", 
		"'@OH1'", "'@OH2'", "'@OH3'", "'@OH30'", "'+'", "'--'", "'++'", "'H'", 
		null, null, null, "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ELEMENT", "ORGANIC_SYMBOL", "AROMATIC_SYMBOL", 
		"WILDCARD", "DIGIT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "smiles.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static smilesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public smilesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public smilesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SmilesContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(smilesParser.Eof, 0); }
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public SmilesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_smiles; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterSmiles(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitSmiles(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmiles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SmilesContext smiles() {
		SmilesContext _localctx = new SmilesContext(Context, State);
		EnterRule(_localctx, 0, RULE_smiles);
		int _la;
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) {
					{
					State = 32; chain(0);
					}
				}

				State = 35; Match(Eof);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 36; Match(T__0);
					State = 37; chain(0);
					State = 38; Match(T__1);
					}
				}

				State = 42; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainContext : ParserRuleContext {
		public Branched_atomContext branched_atom() {
			return GetRuleContext<Branched_atomContext>(0);
		}
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public BondContext bond() {
			return GetRuleContext<BondContext>(0);
		}
		public DotContext dot() {
			return GetRuleContext<DotContext>(0);
		}
		public ChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainContext chain() {
		return chain(0);
	}

	private ChainContext chain(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ChainContext _localctx = new ChainContext(Context, _parentState);
		ChainContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_chain, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 46; branched_atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 60;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 58;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new ChainContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_chain);
						State = 48;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 49; branched_atom();
						}
						break;
					case 2:
						{
						_localctx = new ChainContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_chain);
						State = 50;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 51; bond();
						State = 52; branched_atom();
						}
						break;
					case 3:
						{
						_localctx = new ChainContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_chain);
						State = 54;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 55; dot();
						State = 56; branched_atom();
						}
						break;
					}
					} 
				}
				State = 62;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Branched_atomContext : ParserRuleContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public RingbondContext[] ringbond() {
			return GetRuleContexts<RingbondContext>();
		}
		public RingbondContext ringbond(int i) {
			return GetRuleContext<RingbondContext>(i);
		}
		public BranchContext[] branch() {
			return GetRuleContexts<BranchContext>();
		}
		public BranchContext branch(int i) {
			return GetRuleContext<BranchContext>(i);
		}
		public BondContext[] bond() {
			return GetRuleContexts<BondContext>();
		}
		public BondContext bond(int i) {
			return GetRuleContext<BondContext>(i);
		}
		public Branched_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_branched_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterBranched_atom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitBranched_atom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBranched_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Branched_atomContext branched_atom() {
		Branched_atomContext _localctx = new Branched_atomContext(Context, State);
		EnterRule(_localctx, 4, RULE_branched_atom);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; atom();
			State = 70;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 65;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) {
						{
						State = 64; bond();
						}
					}

					State = 67; ringbond();
					}
					} 
				}
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 76;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 73; branch();
					}
					} 
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BranchContext : ParserRuleContext {
		public ChainContext chain() {
			return GetRuleContext<ChainContext>(0);
		}
		public BondContext bond() {
			return GetRuleContext<BondContext>(0);
		}
		public DotContext dot() {
			return GetRuleContext<DotContext>(0);
		}
		public BranchContext branch() {
			return GetRuleContext<BranchContext>(0);
		}
		public BranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_branch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterBranch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitBranch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBranch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BranchContext branch() {
		BranchContext _localctx = new BranchContext(Context, State);
		EnterRule(_localctx, 6, RULE_branch);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; Match(T__0);
				State = 80; chain(0);
				State = 81; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; Match(T__0);
				State = 84; bond();
				State = 85; chain(0);
				State = 86; Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; Match(T__0);
				State = 89; dot();
				State = 90; chain(0);
				State = 91; Match(T__1);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 93; Match(T__0);
				State = 94; branch();
				State = 95; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RingbondContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(smilesParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(smilesParser.DIGIT, i);
		}
		public RingbondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ringbond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterRingbond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitRingbond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRingbond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RingbondContext ringbond() {
		RingbondContext _localctx = new RingbondContext(Context, State);
		EnterRule(_localctx, 8, RULE_ringbond);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 99; Match(T__2);
				State = 100; Match(DIGIT);
				State = 101; Match(DIGIT);
				}
				}
				break;
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102; Match(DIGIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BondContext : ParserRuleContext {
		public BondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterBond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitBond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BondContext bond() {
		BondContext _localctx = new BondContext(Context, State);
		EnterRule(_localctx, 10, RULE_bond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotContext : ParserRuleContext {
		public DotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitDot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotContext dot() {
		DotContext _localctx = new DotContext(Context, State);
		EnterRule(_localctx, 12, RULE_dot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public IsotopeContext isotope() {
			return GetRuleContext<IsotopeContext>(0);
		}
		public ChiralContext chiral() {
			return GetRuleContext<ChiralContext>(0);
		}
		public HcountContext hcount() {
			return GetRuleContext<HcountContext>(0);
		}
		public ChargeContext charge() {
			return GetRuleContext<ChargeContext>(0);
		}
		public AtomclassContext atomclass() {
			return GetRuleContext<AtomclassContext>(0);
		}
		public OrganicContext organic() {
			return GetRuleContext<OrganicContext>(0);
		}
		public AromaticContext aromatic() {
			return GetRuleContext<AromaticContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 14, RULE_atom);
		int _la;
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 109; Match(T__11);
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGIT) {
					{
					State = 110; isotope();
					}
				}

				State = 113; symbol();
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47))) != 0)) {
					{
					State = 114; chiral();
					}
				}

				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__51) {
					{
					State = 117; hcount();
					}
				}

				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__48) | (1L << T__49) | (1L << T__50))) != 0)) {
					{
					State = 120; charge();
					}
				}

				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__7) {
					{
					State = 123; atomclass();
					}
				}

				State = 126; Match(T__12);
				}
				}
				break;
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128; organic();
				}
				break;
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129; aromatic();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public ITerminalNode ELEMENT() { return GetToken(smilesParser.ELEMENT, 0); }
		public OrganicContext organic() {
			return GetRuleContext<OrganicContext>(0);
		}
		public AromaticContext aromatic() {
			return GetRuleContext<AromaticContext>(0);
		}
		public ITerminalNode WILDCARD() { return GetToken(smilesParser.WILDCARD, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 16, RULE_symbol);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELEMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; Match(ELEMENT);
				}
				break;
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; organic();
				}
				break;
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134; aromatic();
				}
				break;
			case WILDCARD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 135; Match(WILDCARD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrganicContext : ParserRuleContext {
		public OrganicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_organic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterOrganic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitOrganic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrganic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrganicContext organic() {
		OrganicContext _localctx = new OrganicContext(Context, State);
		EnterRule(_localctx, 18, RULE_organic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AromaticContext : ParserRuleContext {
		public AromaticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aromatic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterAromatic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitAromatic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAromatic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AromaticContext aromatic() {
		AromaticContext _localctx = new AromaticContext(Context, State);
		EnterRule(_localctx, 20, RULE_aromatic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChiralContext : ParserRuleContext {
		public ITerminalNode DIGIT() { return GetToken(smilesParser.DIGIT, 0); }
		public ChiralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chiral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterChiral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitChiral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChiral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChiralContext chiral() {
		ChiralContext _localctx = new ChiralContext(Context, State);
		EnterRule(_localctx, 22, RULE_chiral);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142; Match(T__31);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143; Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 3);
				{
				State = 144; Match(T__33);
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 4);
				{
				State = 145; Match(T__34);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 5);
				{
				State = 146; Match(T__35);
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 6);
				{
				State = 147; Match(T__36);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 7);
				{
				State = 148; Match(T__37);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 8);
				{
				State = 149; Match(T__38);
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 9);
				{
				State = 150; Match(T__39);
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 10);
				{
				{
				State = 151; Match(T__40);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGIT) {
					{
					State = 152; Match(DIGIT);
					}
				}

				}
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 11);
				{
				{
				State = 155; Match(T__41);
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGIT) {
					{
					State = 156; Match(DIGIT);
					}
				}

				}
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 12);
				{
				State = 159; Match(T__42);
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 13);
				{
				State = 160; Match(T__43);
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 14);
				{
				{
				State = 161; Match(T__44);
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGIT) {
					{
					State = 162; Match(DIGIT);
					}
				}

				}
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 15);
				{
				{
				State = 165; Match(T__45);
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGIT) {
					{
					State = 166; Match(DIGIT);
					}
				}

				}
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 16);
				{
				State = 169; Match(T__46);
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 17);
				{
				State = 170; Match(T__47);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargeContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(smilesParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(smilesParser.DIGIT, i);
		}
		public ChargeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charge; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterCharge(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitCharge(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharge(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargeContext charge() {
		ChargeContext _localctx = new ChargeContext(Context, State);
		EnterRule(_localctx, 24, RULE_charge);
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 174; Match(T__3);
				State = 176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 175; Match(DIGIT);
					}
					break;
				}
				State = 178; Match(DIGIT);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 179; Match(T__48);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 180; Match(T__48);
				State = 182;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 181; Match(DIGIT);
					}
					break;
				}
				State = 184; Match(DIGIT);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 185; Match(T__49);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 186; Match(T__50);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HcountContext : ParserRuleContext {
		public ITerminalNode DIGIT() { return GetToken(smilesParser.DIGIT, 0); }
		public HcountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hcount; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterHcount(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitHcount(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHcount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HcountContext hcount() {
		HcountContext _localctx = new HcountContext(Context, State);
		EnterRule(_localctx, 26, RULE_hcount);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; Match(T__51);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 190; Match(T__51);
				State = 191; Match(DIGIT);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomclassContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(smilesParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(smilesParser.DIGIT, i);
		}
		public AtomclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterAtomclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitAtomclass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomclass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomclassContext atomclass() {
		AtomclassContext _localctx = new AtomclassContext(Context, State);
		EnterRule(_localctx, 28, RULE_atomclass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(T__7);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 195; Match(DIGIT);
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsotopeContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(smilesParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(smilesParser.DIGIT, i);
		}
		public IsotopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isotope; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.EnterIsotope(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsmilesListener typedListener = listener as IsmilesListener;
			if (typedListener != null) typedListener.ExitIsotope(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsmilesVisitor<TResult> typedVisitor = visitor as IsmilesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsotope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsotopeContext isotope() {
		IsotopeContext _localctx = new IsotopeContext(Context, State);
		EnterRule(_localctx, 30, RULE_isotope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(DIGIT);
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 201; Match(DIGIT);
				}
				break;
			}
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DIGIT) {
				{
				State = 204; Match(DIGIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return chain_sempred((ChainContext)_localctx, predIndex);
		}
		return true;
	}
	private bool chain_sempred(ChainContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ';', '\xD2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x5', '\x2', '$', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '+', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '.', '\n', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '=', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '@', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x44', '\n', '\x4', '\x3', '\x4', '\a', '\x4', 'G', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', 'J', '\v', '\x4', '\x3', '\x4', '\a', 
		'\x4', 'M', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'P', '\v', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x64', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'j', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'r', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', 'v', '\n', '\t', '\x3', '\t', '\x5', '\t', 'y', 
		'\n', '\t', '\x3', '\t', '\x5', '\t', '|', '\n', '\t', '\x3', '\t', '\x5', 
		'\t', '\x7F', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x85', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x8B', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x9C', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xA0', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xA6', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xAA', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xAE', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\xB3', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB9', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xBE', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xC3', '\n', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\xC7', '\n', '\x10', 
		'\r', '\x10', '\xE', '\x10', '\xC8', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\xCD', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\xD0', '\n', 
		'\x11', '\x3', '\x11', '\x2', '\x3', '\x4', '\x12', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\x2', '\x5', '\x3', '\x2', '\x6', '\f', '\x3', '\x2', 
		'\x10', '\x19', '\x3', '\x2', '\x1A', '!', '\x2', '\xF7', '\x2', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '/', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\b', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'i', '\x3', '\x2', '\x2', '\x2', '\f', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'm', '\x3', '\x2', '\x2', '\x2', '\x10', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x16', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xC4', '\x3', '\x2', '\x2', '\x2', ' ', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\"', '$', '\x5', '\x4', '\x3', '\x2', '#', '\"', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', 
		'\x2', '\x2', '\x2', '%', '.', '\a', '\x2', '\x2', '\x3', '&', '\'', '\a', 
		'\x3', '\x2', '\x2', '\'', '(', '\x5', '\x4', '\x3', '\x2', '(', ')', 
		'\a', '\x4', '\x2', '\x2', ')', '+', '\x3', '\x2', '\x2', '\x2', '*', 
		'&', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\x3', '\x2', '\x2', '\x2', ',', '.', '\a', '\x2', '\x2', '\x3', 
		'-', '#', '\x3', '\x2', '\x2', '\x2', '-', '*', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x3', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\b', '\x3', '\x1', 
		'\x2', '\x30', '\x31', '\x5', '\x6', '\x4', '\x2', '\x31', '>', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\f', '\x5', '\x2', '\x2', '\x33', 
		'=', '\x5', '\x6', '\x4', '\x2', '\x34', '\x35', '\f', '\x4', '\x2', '\x2', 
		'\x35', '\x36', '\x5', '\f', '\a', '\x2', '\x36', '\x37', '\x5', '\x6', 
		'\x4', '\x2', '\x37', '=', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\f', '\x3', '\x2', '\x2', '\x39', ':', '\x5', '\xE', '\b', '\x2', ':', 
		';', '\x5', '\x6', '\x4', '\x2', ';', '=', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x32', '\x3', '\x2', '\x2', '\x2', '<', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '<', '\x38', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', 
		'\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', 
		'\x2', '\x2', '?', '\x5', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', 
		'\x2', '\x2', '\x2', '\x41', 'H', '\x5', '\x10', '\t', '\x2', '\x42', 
		'\x44', '\x5', '\f', '\a', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x45', 'G', '\x5', '\n', '\x6', '\x2', '\x46', '\x43', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 
		'I', 'N', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'K', 'M', '\x5', '\b', '\x5', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', 'P', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\x3', '\x2', 
		'\x2', 'R', 'S', '\x5', '\x4', '\x3', '\x2', 'S', 'T', '\a', '\x4', '\x2', 
		'\x2', 'T', '\x64', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\x3', 
		'\x2', '\x2', 'V', 'W', '\x5', '\f', '\a', '\x2', 'W', 'X', '\x5', '\x4', 
		'\x3', '\x2', 'X', 'Y', '\a', '\x4', '\x2', '\x2', 'Y', '\x64', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\a', '\x3', '\x2', '\x2', '[', '\\', '\x5', 
		'\xE', '\b', '\x2', '\\', ']', '\x5', '\x4', '\x3', '\x2', ']', '^', '\a', 
		'\x4', '\x2', '\x2', '^', '\x64', '\x3', '\x2', '\x2', '\x2', '_', '`', 
		'\a', '\x3', '\x2', '\x2', '`', '\x61', '\x5', '\b', '\x5', '\x2', '\x61', 
		'\x62', '\a', '\x4', '\x2', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x63', 'Q', '\x3', '\x2', '\x2', '\x2', '\x63', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x63', 'Z', '\x3', '\x2', '\x2', '\x2', '\x63', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\t', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\a', '\x5', '\x2', '\x2', '\x66', 'g', '\a', ';', '\x2', '\x2', 
		'g', 'j', '\a', ';', '\x2', '\x2', 'h', 'j', '\a', ';', '\x2', '\x2', 
		'i', '\x65', '\x3', '\x2', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'j', '\v', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\t', '\x2', '\x2', 
		'\x2', 'l', '\r', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\r', '\x2', 
		'\x2', 'n', '\xF', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\a', '\xE', 
		'\x2', '\x2', 'p', 'r', '\x5', ' ', '\x11', '\x2', 'q', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', 
		'\x2', '\x2', 's', 'u', '\x5', '\x12', '\n', '\x2', 't', 'v', '\x5', '\x18', 
		'\r', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x5', '\x1C', 
		'\xF', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 'z', '|', '\x5', '\x1A', 
		'\xE', '\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', 
		'\x2', '\x2', '|', '~', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\x5', 
		'\x1E', '\x10', '\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x81', '\a', '\xF', '\x2', '\x2', '\x81', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x85', '\x5', '\x14', '\v', '\x2', '\x83', '\x85', 
		'\x5', '\x16', '\f', '\x2', '\x84', 'o', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x11', '\x3', '\x2', '\x2', '\x2', '\x86', '\x8B', '\a', 
		'\x37', '\x2', '\x2', '\x87', '\x8B', '\x5', '\x14', '\v', '\x2', '\x88', 
		'\x8B', '\x5', '\x16', '\f', '\x2', '\x89', '\x8B', '\a', ':', '\x2', 
		'\x2', '\x8A', '\x86', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\t', '\x3', '\x2', '\x2', '\x8D', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\t', '\x4', '\x2', '\x2', '\x8F', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x90', '\xAE', '\a', '\"', '\x2', 
		'\x2', '\x91', '\xAE', '\a', '#', '\x2', '\x2', '\x92', '\xAE', '\a', 
		'$', '\x2', '\x2', '\x93', '\xAE', '\a', '%', '\x2', '\x2', '\x94', '\xAE', 
		'\a', '&', '\x2', '\x2', '\x95', '\xAE', '\a', '\'', '\x2', '\x2', '\x96', 
		'\xAE', '\a', '(', '\x2', '\x2', '\x97', '\xAE', '\a', ')', '\x2', '\x2', 
		'\x98', '\xAE', '\a', '*', '\x2', '\x2', '\x99', '\x9B', '\a', '+', '\x2', 
		'\x2', '\x9A', '\x9C', '\a', ';', '\x2', '\x2', '\x9B', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', '\a', ',', '\x2', 
		'\x2', '\x9E', '\xA0', '\a', ';', '\x2', '\x2', '\x9F', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xAE', '\a', '-', '\x2', 
		'\x2', '\xA2', '\xAE', '\a', '.', '\x2', '\x2', '\xA3', '\xA5', '\a', 
		'/', '\x2', '\x2', '\xA4', '\xA6', '\a', ';', '\x2', '\x2', '\xA5', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\a', '\x30', 
		'\x2', '\x2', '\xA8', '\xAA', '\a', ';', '\x2', '\x2', '\xA9', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAE', '\a', '\x31', 
		'\x2', '\x2', '\xAC', '\xAE', '\a', '\x32', '\x2', '\x2', '\xAD', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\x92', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\x94', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\x97', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\x99', '\x3', '\x2', '\x2', '\x2', '\xAD', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\x19', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xBE', '\a', '\x6', 
		'\x2', '\x2', '\xB0', '\xB2', '\a', '\x6', '\x2', '\x2', '\xB1', '\xB3', 
		'\a', ';', '\x2', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xBE', '\a', ';', '\x2', '\x2', '\xB5', '\xBE', '\a', 
		'\x33', '\x2', '\x2', '\xB6', '\xB8', '\a', '\x33', '\x2', '\x2', '\xB7', 
		'\xB9', '\a', ';', '\x2', '\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBE', '\a', ';', '\x2', '\x2', '\xBB', 
		'\xBE', '\a', '\x34', '\x2', '\x2', '\xBC', '\xBE', '\a', '\x35', '\x2', 
		'\x2', '\xBD', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC3', '\a', '\x36', '\x2', '\x2', '\xC0', 
		'\xC1', '\a', '\x36', '\x2', '\x2', '\xC1', '\xC3', '\a', ';', '\x2', 
		'\x2', '\xC2', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC6', '\a', '\n', '\x2', '\x2', '\xC5', '\xC7', '\a', ';', '\x2', '\x2', 
		'\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCC', '\a', ';', '\x2', '\x2', '\xCB', '\xCD', '\a', ';', '\x2', 
		'\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xD0', '\a', ';', '\x2', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '#', '*', '-', '<', '>', '\x43', 'H', 'N', 
		'\x63', 'i', 'q', 'u', 'x', '{', '~', '\x84', '\x8A', '\x9B', '\x9F', 
		'\xA5', '\xA9', '\xAD', '\xB2', '\xB8', '\xBD', '\xC2', '\xC8', '\xCC', 
		'\xCF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
